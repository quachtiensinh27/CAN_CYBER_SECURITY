
CAN_UNPROTECTED_TRANSMISSION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b54  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c60  08000c60  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c60  08000c60  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000c60  08000c60  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000c60  08000c60  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c60  08000c60  00001c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c64  08000c64  00001c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000c68  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08000c6c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000c6c  00002074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002315  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bd2  00000000  00000000  00004342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00004f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001da  00000000  00000000  000051c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165d4  00000000  00000000  0000539a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000047ea  00000000  00000000  0001b96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e8a4  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e9fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007d0  00000000  00000000  0009ea40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0009f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000c48 	.word	0x08000c48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000c48 	.word	0x08000c48

0800014c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0b      	blt.n	8000176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4906      	ldr	r1, [pc, #24]	@ (8000180 <__NVIC_EnableIRQ+0x34>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000e100 	.word	0xe000e100

08000184 <CAN_Config>:
 * - BS2 = 0
 * - SJW = 1
 *
 * @retval None
 */
void CAN_Config(void) {
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1 << 25);   // Enable clock for CAN1
 8000188:	4b3e      	ldr	r3, [pc, #248]	@ (8000284 <CAN_Config+0x100>)
 800018a:	69db      	ldr	r3, [r3, #28]
 800018c:	4a3d      	ldr	r2, [pc, #244]	@ (8000284 <CAN_Config+0x100>)
 800018e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000192:	61d3      	str	r3, [r2, #28]

	CAN1->MCR |= (1 << 0);            // Request initialization mode
 8000194:	4b3c      	ldr	r3, [pc, #240]	@ (8000288 <CAN_Config+0x104>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a3b      	ldr	r2, [pc, #236]	@ (8000288 <CAN_Config+0x104>)
 800019a:	f043 0301 	orr.w	r3, r3, #1
 800019e:	6013      	str	r3, [r2, #0]
	while (!(CAN1->MSR & (1 << 0)));  // Wait until CAN enters init mode (INAK flag set)
 80001a0:	bf00      	nop
 80001a2:	4b39      	ldr	r3, [pc, #228]	@ (8000288 <CAN_Config+0x104>)
 80001a4:	685b      	ldr	r3, [r3, #4]
 80001a6:	f003 0301 	and.w	r3, r3, #1
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d0f9      	beq.n	80001a2 <CAN_Config+0x1e>

	CAN1->MCR &= ~((1 << 1)  // Bit 1: SLEEP
 80001ae:	4b36      	ldr	r3, [pc, #216]	@ (8000288 <CAN_Config+0x104>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a35      	ldr	r2, [pc, #212]	@ (8000288 <CAN_Config+0x104>)
 80001b4:	f023 03d2 	bic.w	r3, r3, #210	@ 0xd2
 80001b8:	6013      	str	r3, [r2, #0]
				 | (1 << 7)  // Bit 7: TTCM
				 | (1 << 6)  // Bit 6: AWUM
				 | (1 << 4)); // Bit 4: NART

    CAN1->MCR |= (1 << 2);             // Enable automatic bus-off management
 80001ba:	4b33      	ldr	r3, [pc, #204]	@ (8000288 <CAN_Config+0x104>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a32      	ldr	r2, [pc, #200]	@ (8000288 <CAN_Config+0x104>)
 80001c0:	f043 0304 	orr.w	r3, r3, #4
 80001c4:	6013      	str	r3, [r2, #0]

    CAN1->BTR = (0 << 24)                  // SJW = 1 (bits 24-25 = 00)
 80001c6:	4b30      	ldr	r3, [pc, #192]	@ (8000288 <CAN_Config+0x104>)
 80001c8:	4a30      	ldr	r2, [pc, #192]	@ (800028c <CAN_Config+0x108>)
 80001ca:	61da      	str	r2, [r3, #28]
              | (1 << 16)                  // BS1 = 1 (bits 16-19)
              | (0 << 20)                  // BS2 = 0 (bits 20-22)
              | (3 << 0);                  // Prescaler = 4 (0-based: 3 means divide by 4)

    CAN1->FMR |= (1 << 0);            // Enter filter init mode
 80001cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000288 <CAN_Config+0x104>)
 80001ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80001d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000288 <CAN_Config+0x104>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    CAN1->FA1R &= ~(1 << 0);               // Deactivate filter 0
 80001dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000288 <CAN_Config+0x104>)
 80001de:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80001e2:	4a29      	ldr	r2, [pc, #164]	@ (8000288 <CAN_Config+0x104>)
 80001e4:	f023 0301 	bic.w	r3, r3, #1
 80001e8:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
    CAN1->FS1R |= (1 << 0);                // Set filter 0 to 32-bit scale
 80001ec:	4b26      	ldr	r3, [pc, #152]	@ (8000288 <CAN_Config+0x104>)
 80001ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80001f2:	4a25      	ldr	r2, [pc, #148]	@ (8000288 <CAN_Config+0x104>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
    CAN1->FM1R &= ~(1 << 0);               // Set filter 0 to mask mode
 80001fc:	4b22      	ldr	r3, [pc, #136]	@ (8000288 <CAN_Config+0x104>)
 80001fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000202:	4a21      	ldr	r2, [pc, #132]	@ (8000288 <CAN_Config+0x104>)
 8000204:	f023 0301 	bic.w	r3, r3, #1
 8000208:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1->sFilterRegister[0].FR1 = 0x00000000; // Set 32-bit mask = 0 (accept all)
 800020c:	4b1e      	ldr	r3, [pc, #120]	@ (8000288 <CAN_Config+0x104>)
 800020e:	2200      	movs	r2, #0
 8000210:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
    CAN1->sFilterRegister[0].FR2 = 0x00000000; // Set 32-bit mask = 0 (accept all)
 8000214:	4b1c      	ldr	r3, [pc, #112]	@ (8000288 <CAN_Config+0x104>)
 8000216:	2200      	movs	r2, #0
 8000218:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
    CAN1->FFA1R &= ~(1 << 0);              // Assign filter 0 to FIFO 0
 800021c:	4b1a      	ldr	r3, [pc, #104]	@ (8000288 <CAN_Config+0x104>)
 800021e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000222:	4a19      	ldr	r2, [pc, #100]	@ (8000288 <CAN_Config+0x104>)
 8000224:	f023 0301 	bic.w	r3, r3, #1
 8000228:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    CAN1->FA1R |= (1 << 0);                // Activate filter 0
 800022c:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <CAN_Config+0x104>)
 800022e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000232:	4a15      	ldr	r2, [pc, #84]	@ (8000288 <CAN_Config+0x104>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
    CAN1->FMR &= ~(1 << 0);           // Exit filter init mode
 800023c:	4b12      	ldr	r3, [pc, #72]	@ (8000288 <CAN_Config+0x104>)
 800023e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000242:	4a11      	ldr	r2, [pc, #68]	@ (8000288 <CAN_Config+0x104>)
 8000244:	f023 0301 	bic.w	r3, r3, #1
 8000248:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    CAN1->IER |= (1 << 1)  // Bit 1: FMPIE0
 800024c:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <CAN_Config+0x104>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <CAN_Config+0x104>)
 8000252:	f043 031e 	orr.w	r3, r3, #30
 8000256:	6153      	str	r3, [r2, #20]
			  | (1 << 2)  // Bit 2: EWGIE
			  | (1 << 3)  // Bit 3: EPVIE
			  | (1 << 4); // Bit 4: BOFIE       // Enable bus-off interrupt

    NVIC_EnableIRQ(CAN1_RX0_IRQn);         // Enable CAN1 RX FIFO0 interrupt in NVIC
 8000258:	2014      	movs	r0, #20
 800025a:	f7ff ff77 	bl	800014c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CAN1_TX_IRQn);          // Enable CAN1 TX interrupt in NVIC
 800025e:	2013      	movs	r0, #19
 8000260:	f7ff ff74 	bl	800014c <__NVIC_EnableIRQ>

    CAN1->MCR &= ~(1 << 0);	            // Exit initialization mode
 8000264:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <CAN_Config+0x104>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a07      	ldr	r2, [pc, #28]	@ (8000288 <CAN_Config+0x104>)
 800026a:	f023 0301 	bic.w	r3, r3, #1
 800026e:	6013      	str	r3, [r2, #0]
    while (CAN1->MSR & (1 << 0));       // Wait until initialization mode cleared
 8000270:	bf00      	nop
 8000272:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <CAN_Config+0x104>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1f9      	bne.n	8000272 <CAN_Config+0xee>
}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40021000 	.word	0x40021000
 8000288:	40006400 	.word	0x40006400
 800028c:	00010003 	.word	0x00010003

08000290 <CAN_Send>:
 * @param[in] id          CAN ID (11 or 29 bits)
 * @param[in] data        Pointer to data bytes (up to 8)
 * @param[in] len         Number of data bytes (0-8)
 * @retval None
 */
void CAN_Send(uint8_t isExtended, uint32_t id, uint8_t *data, uint8_t len) {
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	60b9      	str	r1, [r7, #8]
 8000298:	607a      	str	r2, [r7, #4]
 800029a:	461a      	mov	r2, r3
 800029c:	4603      	mov	r3, r0
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	4613      	mov	r3, r2
 80002a2:	73bb      	strb	r3, [r7, #14]
	if (CAN1->ESR & (1 << 2)) {       // If bus is off, cannot send
 80002a4:	4b47      	ldr	r3, [pc, #284]	@ (80003c4 <CAN_Send+0x134>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	f040 8082 	bne.w	80003b6 <CAN_Send+0x126>
        return;                           // Exit function
    }

    uint32_t timeout = 10000;             // Timeout counter waiting for free mailbox
 80002b2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80002b6:	617b      	str	r3, [r7, #20]
    while (!(CAN1->TSR & (1 << 26))   // Check if mailbox 0 is free
 80002b8:	bf00      	nop
 80002ba:	4b42      	ldr	r3, [pc, #264]	@ (80003c4 <CAN_Send+0x134>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
           && timeout--) ;                // Decrement timeout
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d104      	bne.n	80002d0 <CAN_Send+0x40>
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	1e5a      	subs	r2, r3, #1
 80002ca:	617a      	str	r2, [r7, #20]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d1f4      	bne.n	80002ba <CAN_Send+0x2a>
    if (timeout == 0) {                   // If timeout expired and mailbox not free
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d071      	beq.n	80003ba <CAN_Send+0x12a>
        return;                          // Exit without sending
    }

    if (isExtended) {                     // Extended frame
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d007      	beq.n	80002ec <CAN_Send+0x5c>
        CAN1->sTxMailBox[0].TIR = (id << 3) | (1 << 2); // Set extended ID and IDE bit
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	4a38      	ldr	r2, [pc, #224]	@ (80003c4 <CAN_Send+0x134>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
 80002ea:	e004      	b.n	80002f6 <CAN_Send+0x66>
    } else {                             // Standard frame
        CAN1->sTxMailBox[0].TIR = (id << 21);                 // Set standard 11-bit ID
 80002ec:	4a35      	ldr	r2, [pc, #212]	@ (80003c4 <CAN_Send+0x134>)
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	055b      	lsls	r3, r3, #21
 80002f2:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
    }

    CAN1->sTxMailBox[0].TDTR = len & 0x0F;  // Set data length (DLC) (0-8)
 80002f6:	7bbb      	ldrb	r3, [r7, #14]
 80002f8:	4a32      	ldr	r2, [pc, #200]	@ (80003c4 <CAN_Send+0x134>)
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

    CAN1->sTxMailBox[0].TDLR = 0;         // Clear low data register (first 4 bytes)
 8000302:	4b30      	ldr	r3, [pc, #192]	@ (80003c4 <CAN_Send+0x134>)
 8000304:	2200      	movs	r2, #0
 8000306:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    CAN1->sTxMailBox[0].TDHR = 0;         // Clear high data register (next 4 bytes)
 800030a:	4b2e      	ldr	r3, [pc, #184]	@ (80003c4 <CAN_Send+0x134>)
 800030c:	2200      	movs	r2, #0
 800030e:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

    for (uint8_t i = 0; i < len && i < 8; i++) {  // Copy data bytes into mailbox registers
 8000312:	2300      	movs	r3, #0
 8000314:	74fb      	strb	r3, [r7, #19]
 8000316:	e027      	b.n	8000368 <CAN_Send+0xd8>
        if (i < 4) {
 8000318:	7cfb      	ldrb	r3, [r7, #19]
 800031a:	2b03      	cmp	r3, #3
 800031c:	d810      	bhi.n	8000340 <CAN_Send+0xb0>
            CAN1->sTxMailBox[0].TDLR |= ((uint32_t)data[i] << (8 * i));  // first 4 bytes
 800031e:	4b29      	ldr	r3, [pc, #164]	@ (80003c4 <CAN_Send+0x134>)
 8000320:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8000324:	7cfb      	ldrb	r3, [r7, #19]
 8000326:	6879      	ldr	r1, [r7, #4]
 8000328:	440b      	add	r3, r1
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4619      	mov	r1, r3
 800032e:	7cfb      	ldrb	r3, [r7, #19]
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	4923      	ldr	r1, [pc, #140]	@ (80003c4 <CAN_Send+0x134>)
 8000338:	4313      	orrs	r3, r2
 800033a:	f8c1 3188 	str.w	r3, [r1, #392]	@ 0x188
 800033e:	e010      	b.n	8000362 <CAN_Send+0xd2>
        } else {
            CAN1->sTxMailBox[0].TDHR |= ((uint32_t)data[i] << (8 * (i - 4))); // next 4 bytes
 8000340:	4b20      	ldr	r3, [pc, #128]	@ (80003c4 <CAN_Send+0x134>)
 8000342:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 8000346:	7cfb      	ldrb	r3, [r7, #19]
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	440b      	add	r3, r1
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	4619      	mov	r1, r3
 8000350:	7cfb      	ldrb	r3, [r7, #19]
 8000352:	3b04      	subs	r3, #4
 8000354:	00db      	lsls	r3, r3, #3
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	491a      	ldr	r1, [pc, #104]	@ (80003c4 <CAN_Send+0x134>)
 800035c:	4313      	orrs	r3, r2
 800035e:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
    for (uint8_t i = 0; i < len && i < 8; i++) {  // Copy data bytes into mailbox registers
 8000362:	7cfb      	ldrb	r3, [r7, #19]
 8000364:	3301      	adds	r3, #1
 8000366:	74fb      	strb	r3, [r7, #19]
 8000368:	7cfa      	ldrb	r2, [r7, #19]
 800036a:	7bbb      	ldrb	r3, [r7, #14]
 800036c:	429a      	cmp	r2, r3
 800036e:	d202      	bcs.n	8000376 <CAN_Send+0xe6>
 8000370:	7cfb      	ldrb	r3, [r7, #19]
 8000372:	2b07      	cmp	r3, #7
 8000374:	d9d0      	bls.n	8000318 <CAN_Send+0x88>
        }
    }

    CAN1->sTxMailBox[0].TIR |= (1 << 0);    // Request transmission
 8000376:	4b13      	ldr	r3, [pc, #76]	@ (80003c4 <CAN_Send+0x134>)
 8000378:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800037c:	4a11      	ldr	r2, [pc, #68]	@ (80003c4 <CAN_Send+0x134>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

    timeout = 10000;                         // Timeout waiting for transmit complete or error
 8000386:	f242 7310 	movw	r3, #10000	@ 0x2710
 800038a:	617b      	str	r3, [r7, #20]
    while (!(CAN1->TSR & ((1 << 0)  		 // RQCP0: Request Completed Mailbox 0
 800038c:	bf00      	nop
 800038e:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <CAN_Send+0x134>)
 8000390:	689a      	ldr	r2, [r3, #8]
 8000392:	4b0d      	ldr	r3, [pc, #52]	@ (80003c8 <CAN_Send+0x138>)
 8000394:	4013      	ands	r3, r2
                            | (1 << 19) 	 // TERR0: Transmission Error
                            | (1 << 20))) 	 // ALST0: Arbitration Lost
               && timeout--) ;               // Decrement timeout
 8000396:	2b00      	cmp	r3, #0
 8000398:	d104      	bne.n	80003a4 <CAN_Send+0x114>
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	1e5a      	subs	r2, r3, #1
 800039e:	617a      	str	r2, [r7, #20]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f4      	bne.n	800038e <CAN_Send+0xfe>

    CAN1->TSR |= (1 << 0)  // RQCP0
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <CAN_Send+0x134>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a06      	ldr	r2, [pc, #24]	@ (80003c4 <CAN_Send+0x134>)
 80003aa:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6093      	str	r3, [r2, #8]
 80003b4:	e002      	b.n	80003bc <CAN_Send+0x12c>
        return;                           // Exit function
 80003b6:	bf00      	nop
 80003b8:	e000      	b.n	80003bc <CAN_Send+0x12c>
        return;                          // Exit without sending
 80003ba:	bf00      	nop
			  | (1 << 19) // TERR0
			  | (1 << 20); // ALST0
}
 80003bc:	371c      	adds	r7, #28
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40006400 	.word	0x40006400
 80003c8:	00180001 	.word	0x00180001

080003cc <USB_LP_CAN1_RX0_IRQHandler>:
 * - Reads ID and data from FIFO.
 * - Calls processing function for received frame.
 *
 * @retval None
 */
void USB_LP_CAN1_RX0_IRQHandler(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
	if (CAN1->ESR & ((1 << 0) | (1 << 1) | (1 << 2))) { // Check CAN errors
 80003d2:	4b37      	ldr	r3, [pc, #220]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0307 	and.w	r3, r3, #7
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d006      	beq.n	80003ec <USB_LP_CAN1_RX0_IRQHandler+0x20>
		CAN1->ESR &= ~((1 << 0) | (1 << 1) | (1 << 2));  // Clear error flags
 80003de:	4b34      	ldr	r3, [pc, #208]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a33      	ldr	r2, [pc, #204]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 80003e4:	f023 0307 	bic.w	r3, r3, #7
 80003e8:	6193      	str	r3, [r2, #24]
        return;                                                     // Exit if error present
 80003ea:	e05d      	b.n	80004a8 <USB_LP_CAN1_RX0_IRQHandler+0xdc>
    }

	if (((CAN1->RF0R >> 0) & 0x03) == 0) return;   // Exit if FIFO0 empty
 80003ec:	4b30      	ldr	r3, [pc, #192]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	f003 0303 	and.w	r3, r3, #3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d056      	beq.n	80004a6 <USB_LP_CAN1_RX0_IRQHandler+0xda>

    uint32_t id = 0;                              // Variable for CAN ID
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
    uint8_t isExtended = ((CAN1->sFIFOMailBox[0].RIR >> 2) & 0x01); // Check extended ID
 80003fc:	4b2c      	ldr	r3, [pc, #176]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 80003fe:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000402:	089b      	lsrs	r3, r3, #2
 8000404:	b2db      	uxtb	r3, r3
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	74bb      	strb	r3, [r7, #18]
    uint8_t len = CAN1->sFIFOMailBox[0].RDTR & 0x0F;  // Read data length (DLC)
 800040c:	4b28      	ldr	r3, [pc, #160]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 800040e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8000412:	b2db      	uxtb	r3, r3
 8000414:	f003 030f 	and.w	r3, r3, #15
 8000418:	747b      	strb	r3, [r7, #17]
    uint8_t data[8];                              // Data array

    if (isExtended)                              // Extended frame
 800041a:	7cbb      	ldrb	r3, [r7, #18]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d005      	beq.n	800042c <USB_LP_CAN1_RX0_IRQHandler+0x60>
        id = (CAN1->sFIFOMailBox[0].RIR >> 3); // Read 29-bit ID (shift right by 3)
 8000420:	4b23      	ldr	r3, [pc, #140]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 8000422:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000426:	08db      	lsrs	r3, r3, #3
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	e004      	b.n	8000436 <USB_LP_CAN1_RX0_IRQHandler+0x6a>
    else
        id = (CAN1->sFIFOMailBox[0].RIR >> 21); // Read 11-bit ID (shift right by 21)
 800042c:	4b20      	ldr	r3, [pc, #128]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 800042e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000432:	0d5b      	lsrs	r3, r3, #21
 8000434:	617b      	str	r3, [r7, #20]

    uint32_t rdlr = CAN1->sFIFOMailBox[0].RDLR; // Read data low register (4 bytes)
 8000436:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 8000438:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800043c:	60fb      	str	r3, [r7, #12]
    uint32_t rdhr = CAN1->sFIFOMailBox[0].RDHR; // Read data high register (4 bytes)
 800043e:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 8000440:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8000444:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < len && i < 8; i++) { // Extract each data byte
 8000446:	2300      	movs	r3, #0
 8000448:	74fb      	strb	r3, [r7, #19]
 800044a:	e018      	b.n	800047e <USB_LP_CAN1_RX0_IRQHandler+0xb2>
        data[i] = (i < 4) ? (rdlr >> (8 * i)) & 0xFF : (rdhr >> (8 * (i - 4))) & 0xFF;
 800044c:	7cfb      	ldrb	r3, [r7, #19]
 800044e:	2b03      	cmp	r3, #3
 8000450:	d806      	bhi.n	8000460 <USB_LP_CAN1_RX0_IRQHandler+0x94>
 8000452:	7cfb      	ldrb	r3, [r7, #19]
 8000454:	00db      	lsls	r3, r3, #3
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	fa22 f303 	lsr.w	r3, r2, r3
 800045c:	b2db      	uxtb	r3, r3
 800045e:	e006      	b.n	800046e <USB_LP_CAN1_RX0_IRQHandler+0xa2>
 8000460:	7cfb      	ldrb	r3, [r7, #19]
 8000462:	3b04      	subs	r3, #4
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	68ba      	ldr	r2, [r7, #8]
 8000468:	fa22 f303 	lsr.w	r3, r2, r3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	7cfa      	ldrb	r2, [r7, #19]
 8000470:	3218      	adds	r2, #24
 8000472:	443a      	add	r2, r7
 8000474:	f802 3c18 	strb.w	r3, [r2, #-24]
    for (uint8_t i = 0; i < len && i < 8; i++) { // Extract each data byte
 8000478:	7cfb      	ldrb	r3, [r7, #19]
 800047a:	3301      	adds	r3, #1
 800047c:	74fb      	strb	r3, [r7, #19]
 800047e:	7cfa      	ldrb	r2, [r7, #19]
 8000480:	7c7b      	ldrb	r3, [r7, #17]
 8000482:	429a      	cmp	r2, r3
 8000484:	d202      	bcs.n	800048c <USB_LP_CAN1_RX0_IRQHandler+0xc0>
 8000486:	7cfb      	ldrb	r3, [r7, #19]
 8000488:	2b07      	cmp	r3, #7
 800048a:	d9df      	bls.n	800044c <USB_LP_CAN1_RX0_IRQHandler+0x80>
    }

    CAN1->RF0R |= (1 << 5);                // Release FIFO0 (remove read message)
 800048c:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	4a07      	ldr	r2, [pc, #28]	@ (80004b0 <USB_LP_CAN1_RX0_IRQHandler+0xe4>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	60d3      	str	r3, [r2, #12]

    Process_CAN_Frame(id, isExtended, data, len); // Call function to process received CAN frame
 8000498:	7c7b      	ldrb	r3, [r7, #17]
 800049a:	463a      	mov	r2, r7
 800049c:	7cb9      	ldrb	r1, [r7, #18]
 800049e:	6978      	ldr	r0, [r7, #20]
 80004a0:	f000 f808 	bl	80004b4 <Process_CAN_Frame>
 80004a4:	e000      	b.n	80004a8 <USB_LP_CAN1_RX0_IRQHandler+0xdc>
	if (((CAN1->RF0R >> 0) & 0x03) == 0) return;   // Exit if FIFO0 empty
 80004a6:	bf00      	nop
}
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40006400 	.word	0x40006400

080004b4 <Process_CAN_Frame>:
 * @param[in] isExtended  1 if extended ID, 0 if standard
 * @param[in] data        Pointer to received data
 * @param[in] len         Number of data bytes
 * @retval None
 */
void Process_CAN_Frame(uint32_t id, uint8_t isExtended, uint8_t *data, uint8_t len) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	607a      	str	r2, [r7, #4]
 80004be:	461a      	mov	r2, r3
 80004c0:	460b      	mov	r3, r1
 80004c2:	72fb      	strb	r3, [r7, #11]
 80004c4:	4613      	mov	r3, r2
 80004c6:	72bb      	strb	r3, [r7, #10]
    UART_SendByte(isExtended);                    // Send byte indicating extended or standard ID
 80004c8:	7afb      	ldrb	r3, [r7, #11]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fa46 	bl	800095c <UART_SendByte>

    if (isExtended) {                             // If extended ID (4 bytes)
 80004d0:	7afb      	ldrb	r3, [r7, #11]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d017      	beq.n	8000506 <Process_CAN_Frame+0x52>
        UART_SendByte((id >> 24) & 0xFF);        // Send highest byte
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	0e1b      	lsrs	r3, r3, #24
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fa3d 	bl	800095c <UART_SendByte>
        UART_SendByte((id >> 16) & 0xFF);        // Send second byte
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	0c1b      	lsrs	r3, r3, #16
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fa37 	bl	800095c <UART_SendByte>
        UART_SendByte((id >> 8) & 0xFF);         // Send third byte
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	0a1b      	lsrs	r3, r3, #8
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fa31 	bl	800095c <UART_SendByte>
        UART_SendByte(id & 0xFF);                 // Send lowest byte
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fa2c 	bl	800095c <UART_SendByte>
 8000504:	e00a      	b.n	800051c <Process_CAN_Frame+0x68>
    } else {                                      // If standard ID (2 bytes)
        UART_SendByte((id >> 8) & 0xFF);         // Send high byte
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	0a1b      	lsrs	r3, r3, #8
 800050a:	b2db      	uxtb	r3, r3
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fa25 	bl	800095c <UART_SendByte>
        UART_SendByte(id & 0xFF);                 // Send low byte
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fa20 	bl	800095c <UART_SendByte>
    }

    UART_SendByte(len);                           // Send data length (DLC)
 800051c:	7abb      	ldrb	r3, [r7, #10]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fa1c 	bl	800095c <UART_SendByte>

    for (uint8_t i = 0; i < len; i++) {          // Send each data byte
 8000524:	2300      	movs	r3, #0
 8000526:	75fb      	strb	r3, [r7, #23]
 8000528:	e009      	b.n	800053e <Process_CAN_Frame+0x8a>
        UART_SendByte(data[i]);
 800052a:	7dfb      	ldrb	r3, [r7, #23]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4413      	add	r3, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fa12 	bl	800095c <UART_SendByte>
    for (uint8_t i = 0; i < len; i++) {          // Send each data byte
 8000538:	7dfb      	ldrb	r3, [r7, #23]
 800053a:	3301      	adds	r3, #1
 800053c:	75fb      	strb	r3, [r7, #23]
 800053e:	7dfa      	ldrb	r2, [r7, #23]
 8000540:	7abb      	ldrb	r3, [r7, #10]
 8000542:	429a      	cmp	r2, r3
 8000544:	d3f1      	bcc.n	800052a <Process_CAN_Frame+0x76>
    }

    can_frame_ready = 1;                          // Set flag indicating CAN frame ready for processing
 8000546:	4b03      	ldr	r3, [pc, #12]	@ (8000554 <Process_CAN_Frame+0xa0>)
 8000548:	2201      	movs	r2, #1
 800054a:	701a      	strb	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000020 	.word	0x20000020

08000558 <GPIO_Config>:
 *        Make sure CAN remapping is disabled unless explicitly required.
 *
 * @param None
 * @retval None
 *****************************************************************************/
void GPIO_Config(void) {
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOA, GPIOC (optional), and AFIO
	RCC->APB2ENR |= (1 << 2) | (1 << 4) | (1 << 0);
 800055c:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <GPIO_Config+0x48>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a0f      	ldr	r2, [pc, #60]	@ (80005a0 <GPIO_Config+0x48>)
 8000562:	f043 0315 	orr.w	r3, r3, #21
 8000566:	6193      	str	r3, [r2, #24]

    // Configure PA11 (CAN_RX) as input floating
    // Clear CNF11[1:0] and MODE11[1:0] bits
	GPIOA->CRH &= ~((0b1111) << 12);
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <GPIO_Config+0x4c>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <GPIO_Config+0x4c>)
 800056e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000572:	6053      	str	r3, [r2, #4]
    // Set CNF11 to input floating (01), MODE11 to input (00)
	GPIOA->CRH |= (0b01 << 14);
 8000574:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <GPIO_Config+0x4c>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <GPIO_Config+0x4c>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6053      	str	r3, [r2, #4]

    // Configure PA12 (CAN_TX) as alternate function push-pull output
    // Clear CNF12[1:0] and MODE12[1:0] bits
	GPIOA->CRH &= ~((0b1111) << 16);
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <GPIO_Config+0x4c>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	4a07      	ldr	r2, [pc, #28]	@ (80005a4 <GPIO_Config+0x4c>)
 8000586:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800058a:	6053      	str	r3, [r2, #4]
    // Set MODE12 to output mode, max speed 2 MHz (10)
    // Set CNF12 to alternate function push-pull (10)
	GPIOA->CRH |= (0b10 << 16) | (0b10 << 18);
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <GPIO_Config+0x4c>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <GPIO_Config+0x4c>)
 8000592:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000596:	6053      	str	r3, [r2, #4]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800

080005a8 <main>:
 *        in the loop if required.
 *
 * @retval int This function never returns; the value is for ISO-C compliance.
 */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    /* ---- Peripheral initialization -------------------------------------- */
    GPIO_Config();          /*   Configure GPIO pins                         */
 80005ac:	f7ff ffd4 	bl	8000558 <GPIO_Config>
    UART_Config();          /*   Initialize UART1                            */
 80005b0:	f000 f98c 	bl	80008cc <UART_Config>
    CAN_Config();           /*   Initialize CAN1                             */
 80005b4:	f7ff fde6 	bl	8000184 <CAN_Config>
    Timer2_Config();        /*   Initialize Timer 2 for repeated CAN frames  */
 80005b8:	f000 f86c 	bl	8000694 <Timer2_Config>

    UART_Init_Buffers();    /*   Clear UART receive buffers                  */
 80005bc:	f000 f9be 	bl	800093c <UART_Init_Buffers>
    repeat = 0;             /*   Disable repeat mode initially               */
 80005c0:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <main+0x44>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]

    /* ---- Main loop ------------------------------------------------------ */
    while (1)
    {
        /* Handle a complete UART frame */
        if (uart_frame_ready)
 80005c6:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <main+0x48>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d004      	beq.n	80005da <main+0x32>
        {
            uart_frame_ready = 0;
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <main+0x48>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
            Process_UART_Frame();
 80005d6:	f000 fa49 	bl	8000a6c <Process_UART_Frame>
        }

        /* Optional main-loop processing of a received CAN frame             */
        if (can_frame_ready)
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <main+0x4c>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f0      	beq.n	80005c6 <main+0x1e>
        {
            can_frame_ready = 0;
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <main+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
        if (uart_frame_ready)
 80005ea:	e7ec      	b.n	80005c6 <main+0x1e>
 80005ec:	20000021 	.word	0x20000021
 80005f0:	2000006c 	.word	0x2000006c
 80005f4:	20000020 	.word	0x20000020

080005f8 <NMI_Handler>:
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <NMI_Handler+0x4>

08000600 <HardFault_Handler>:
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <MemManage_Handler+0x4>

08000610 <BusFault_Handler>:
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <UsageFault_Handler+0x4>

08000620 <SVC_Handler>:
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <DebugMon_Handler>:
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <PendSV_Handler>:
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <SysTick_Handler>:
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
 8000648:	f000 fac8 	bl	8000bdc <HAL_IncTick>
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <SystemInit>:
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <__NVIC_EnableIRQ>:
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db0b      	blt.n	8000686 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 021f 	and.w	r2, r3, #31
 8000674:	4906      	ldr	r1, [pc, #24]	@ (8000690 <__NVIC_EnableIRQ+0x34>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f202 	lsl.w	r2, r0, r2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	e000e100 	.word	0xe000e100

08000694 <Timer2_Config>:
 * @ref TIM2_IRQHandler is invoked on overflow.
 *
 * @retval None
 *****************************************************************************/
void Timer2_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1 << 0);             /* Enable TIM2 clock                */
 8000698:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <Timer2_Config+0x40>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	4a0d      	ldr	r2, [pc, #52]	@ (80006d4 <Timer2_Config+0x40>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	61d3      	str	r3, [r2, #28]
    TIM2->PSC  = 1000 - 1;                /* Set prescaler for 1 ms tick      */
 80006a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR  = 1000;                    /* Set auto-reload for 1 second     */
 80006ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= (1 << 0);               /* Enable update interrupt          */
 80006b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);            /* Enable TIM2 IRQ in NVIC          */
 80006c8:	201c      	movs	r0, #28
 80006ca:	f7ff ffc7 	bl	800065c <__NVIC_EnableIRQ>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <Timer_Stop>:
 * update-event flag to prevent spurious interrupts.
 *
 * @retval None
 *****************************************************************************/
void Timer_Stop(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	TIM2->CR1  &= ~(1 << 0);     /* Stop counter                   */
 80006dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e6:	f023 0301 	bic.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]
	TIM2->DIER &= ~(1 << 0);     /* Disable update interrupt       */
 80006ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	60d3      	str	r3, [r2, #12]
	TIM2->SR   &= ~(1 << 0);    /* Clear update flag              */
 80006fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000706:	f023 0301 	bic.w	r3, r3, #1
 800070a:	6113      	str	r3, [r2, #16]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <Timer_Setup_Repeat>:
void Timer_Setup_Repeat(uint8_t mode,
                        uint32_t id,
                        uint8_t *data,
                        uint8_t len,
                        uint16_t interval)
{
 8000714:	b480      	push	{r7}
 8000716:	b087      	sub	sp, #28
 8000718:	af00      	add	r7, sp, #0
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	461a      	mov	r2, r3
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	4613      	mov	r3, r2
 8000726:	73bb      	strb	r3, [r7, #14]
    /* Copy frame header */
    current_frame[0] = mode;
 8000728:	4a27      	ldr	r2, [pc, #156]	@ (80007c8 <Timer_Setup_Repeat+0xb4>)
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	7013      	strb	r3, [r2, #0]
    current_frame[1] = (id >> 24) & 0xFF;
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	0e1b      	lsrs	r3, r3, #24
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <Timer_Setup_Repeat+0xb4>)
 8000736:	705a      	strb	r2, [r3, #1]
    current_frame[2] = (id >> 16) & 0xFF;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	0c1b      	lsrs	r3, r3, #16
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <Timer_Setup_Repeat+0xb4>)
 8000740:	709a      	strb	r2, [r3, #2]
    current_frame[3] = (id >>  8) & 0xFF;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <Timer_Setup_Repeat+0xb4>)
 800074a:	70da      	strb	r2, [r3, #3]
    current_frame[4] =  id        & 0xFF;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <Timer_Setup_Repeat+0xb4>)
 8000752:	711a      	strb	r2, [r3, #4]
    current_frame[5] = len;
 8000754:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <Timer_Setup_Repeat+0xb4>)
 8000756:	7bbb      	ldrb	r3, [r7, #14]
 8000758:	7153      	strb	r3, [r2, #5]

    /* Copy payload */
    for (uint8_t i = 0; i < len; ++i) {
 800075a:	2300      	movs	r3, #0
 800075c:	75fb      	strb	r3, [r7, #23]
 800075e:	e00a      	b.n	8000776 <Timer_Setup_Repeat+0x62>
        current_frame[6 + i] = data[i];
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	441a      	add	r2, r3
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	3306      	adds	r3, #6
 800076a:	7811      	ldrb	r1, [r2, #0]
 800076c:	4a16      	ldr	r2, [pc, #88]	@ (80007c8 <Timer_Setup_Repeat+0xb4>)
 800076e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < len; ++i) {
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	3301      	adds	r3, #1
 8000774:	75fb      	strb	r3, [r7, #23]
 8000776:	7dfa      	ldrb	r2, [r7, #23]
 8000778:	7bbb      	ldrb	r3, [r7, #14]
 800077a:	429a      	cmp	r2, r3
 800077c:	d3f0      	bcc.n	8000760 <Timer_Setup_Repeat+0x4c>
    }

    /* Configure timer period (tick = 1 ms ⇒ ARR = interval) */
    TIM2->ARR = interval;          /* Set auto-reload value to interval  */
 800077e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000782:	8c3b      	ldrh	r3, [r7, #32]
 8000784:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CNT = 0;                 /* Reset counter                      */
 8000786:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->SR  &= ~(1 << 0);        /* Clear pending update flag          */
 800078e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000798:	f023 0301 	bic.w	r3, r3, #1
 800079c:	6113      	str	r3, [r2, #16]
    TIM2->DIER |= (1 << 0);        /* Enable update interrupt            */
 800079e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	60d3      	str	r3, [r2, #12]
    TIM2->CR1  |= (1 << 0);        /* Start timer                        */
 80007ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	bf00      	nop
 80007c0:	371c      	adds	r7, #28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000024 	.word	0x20000024

080007cc <TIM2_IRQHandler>:
 * the stored CAN frame on every timer overflow.
 *
 * @retval None
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
	if (!(TIM2->SR & (1 << 0)))
 80007d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d04f      	beq.n	8000880 <TIM2_IRQHandler+0xb4>
        return;                       /* Spurious interrupt, ignore       */

	TIM2->SR &= ~(1 << 0);          /* Clear update flag                */
 80007e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ea:	f023 0301 	bic.w	r3, r3, #1
 80007ee:	6113      	str	r3, [r2, #16]
    if (!repeat)
 80007f0:	4b26      	ldr	r3, [pc, #152]	@ (800088c <TIM2_IRQHandler+0xc0>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d044      	beq.n	8000884 <TIM2_IRQHandler+0xb8>
        return;                       /* Repeat mode not enabled, skip    */

    /* Reconstruct CAN parameters from buffer */
    uint8_t  mode = current_frame[0];
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <TIM2_IRQHandler+0xc4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	75bb      	strb	r3, [r7, #22]
    uint32_t id   = (mode == 0)
                  ? ((current_frame[3] << 8) | current_frame[4])          /* 11-bit */
                  : ((current_frame[1] << 24) | (current_frame[2] << 16)  /* 29-bit */
 8000800:	7dbb      	ldrb	r3, [r7, #22]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d108      	bne.n	8000818 <TIM2_IRQHandler+0x4c>
                  ? ((current_frame[3] << 8) | current_frame[4])          /* 11-bit */
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <TIM2_IRQHandler+0xc4>)
 8000808:	78db      	ldrb	r3, [r3, #3]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	4a20      	ldr	r2, [pc, #128]	@ (8000890 <TIM2_IRQHandler+0xc4>)
 8000810:	7912      	ldrb	r2, [r2, #4]
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	4313      	orrs	r3, r2
 8000816:	e011      	b.n	800083c <TIM2_IRQHandler+0x70>
                  : ((current_frame[1] << 24) | (current_frame[2] << 16)  /* 29-bit */
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <TIM2_IRQHandler+0xc4>)
 800081a:	785b      	ldrb	r3, [r3, #1]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	061a      	lsls	r2, r3, #24
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <TIM2_IRQHandler+0xc4>)
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	041b      	lsls	r3, r3, #16
 8000828:	431a      	orrs	r2, r3
                   | (current_frame[3] <<  8) |  current_frame[4]);
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <TIM2_IRQHandler+0xc4>)
 800082c:	78db      	ldrb	r3, [r3, #3]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	4313      	orrs	r3, r2
 8000834:	4a16      	ldr	r2, [pc, #88]	@ (8000890 <TIM2_IRQHandler+0xc4>)
 8000836:	7912      	ldrb	r2, [r2, #4]
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	4313      	orrs	r3, r2
    uint32_t id   = (mode == 0)
 800083c:	613b      	str	r3, [r7, #16]

    uint8_t len  = current_frame[5];
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <TIM2_IRQHandler+0xc4>)
 8000840:	795b      	ldrb	r3, [r3, #5]
 8000842:	73fb      	strb	r3, [r7, #15]
    uint8_t data[8];
    for (uint8_t i = 0; i < len && i < 8; ++i) {
 8000844:	2300      	movs	r3, #0
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	e00c      	b.n	8000864 <TIM2_IRQHandler+0x98>
        data[i] = current_frame[6 + i];
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	1d9a      	adds	r2, r3, #6
 800084e:	7dfb      	ldrb	r3, [r7, #23]
 8000850:	490f      	ldr	r1, [pc, #60]	@ (8000890 <TIM2_IRQHandler+0xc4>)
 8000852:	5c8a      	ldrb	r2, [r1, r2]
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	3318      	adds	r3, #24
 8000858:	443b      	add	r3, r7
 800085a:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < len && i < 8; ++i) {
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	3301      	adds	r3, #1
 8000862:	75fb      	strb	r3, [r7, #23]
 8000864:	7dfa      	ldrb	r2, [r7, #23]
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	429a      	cmp	r2, r3
 800086a:	d202      	bcs.n	8000872 <TIM2_IRQHandler+0xa6>
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d9eb      	bls.n	800084a <TIM2_IRQHandler+0x7e>
    }

    CAN_Send(mode, id, data, len);    /* Re-transmit stored CAN frame     */
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	1d3a      	adds	r2, r7, #4
 8000876:	7db8      	ldrb	r0, [r7, #22]
 8000878:	6939      	ldr	r1, [r7, #16]
 800087a:	f7ff fd09 	bl	8000290 <CAN_Send>
 800087e:	e002      	b.n	8000886 <TIM2_IRQHandler+0xba>
        return;                       /* Spurious interrupt, ignore       */
 8000880:	bf00      	nop
 8000882:	e000      	b.n	8000886 <TIM2_IRQHandler+0xba>
        return;                       /* Repeat mode not enabled, skip    */
 8000884:	bf00      	nop
}
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000021 	.word	0x20000021
 8000890:	20000024 	.word	0x20000024

08000894 <__NVIC_EnableIRQ>:
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	db0b      	blt.n	80008be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 021f 	and.w	r2, r3, #31
 80008ac:	4906      	ldr	r1, [pc, #24]	@ (80008c8 <__NVIC_EnableIRQ+0x34>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	095b      	lsrs	r3, r3, #5
 80008b4:	2001      	movs	r0, #1
 80008b6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	e000e100 	.word	0xe000e100

080008cc <UART_Config>:
 * @brief Configure UART1 for 9600 baud rate at 8 MHz clock.
 *        - PA9: TX (AF Push-Pull, 2 MHz)
 *        - PA10: RX (Input floating)
 *        - Enable USART1 and RX interrupt
 */
void UART_Config(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 2)|(1 << 14);
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <UART_Config+0x64>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <UART_Config+0x64>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
    // Enable clock for GPIOA port and USART1 peripheral

    // Configure PA9 as TX (Alternate Function Push-Pull, max speed 2 MHz)
	GPIOA->CRH &= ~((0xF) << 4); // Clear previous config bits for PA9
 80008e0:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <UART_Config+0x68>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4a13      	ldr	r2, [pc, #76]	@ (8000934 <UART_Config+0x68>)
 80008e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80008ea:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= ((0x2 << 2) | (0x2)); // MODE9=10 (2 MHz output), CNF9=10 (AF Push-Pull)
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <UART_Config+0x68>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4a10      	ldr	r2, [pc, #64]	@ (8000934 <UART_Config+0x68>)
 80008f2:	f043 030a 	orr.w	r3, r3, #10
 80008f6:	6053      	str	r3, [r2, #4]

    // Configure PA10 as RX (Input floating)
	GPIOA->CRH &= ~((0xF) << 8); // Clear previous config bits for PA10
 80008f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <UART_Config+0x68>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <UART_Config+0x68>)
 80008fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000902:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (0x1 << 10);                    // CNF10=01 (Floating input), MODE10=00 (Input mode)
 8000904:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <UART_Config+0x68>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <UART_Config+0x68>)
 800090a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800090e:	6053      	str	r3, [r2, #4]

    USART1->BRR = 0x45;  // Set baud rate register for 9600 baud at 8 MHz clock (calculated value)
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <UART_Config+0x6c>)
 8000912:	2245      	movs	r2, #69	@ 0x45
 8000914:	609a      	str	r2, [r3, #8]
    USART1->CR1 |= (1 << 13)|(1 << 2)|(1 << 3)|(1 << 5);
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <UART_Config+0x6c>)
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <UART_Config+0x6c>)
 800091c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000920:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 8000924:	60d3      	str	r3, [r2, #12]
    // Enable Receiver, Transmitter, USART, and RX interrupt enable

    NVIC_EnableIRQ(USART1_IRQn);  // Enable USART1 interrupt in the NVIC (Nested Vector Interrupt Controller)
 8000926:	2025      	movs	r0, #37	@ 0x25
 8000928:	f7ff ffb4 	bl	8000894 <__NVIC_EnableIRQ>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800
 8000938:	40013800 	.word	0x40013800

0800093c <UART_Init_Buffers>:
 * @brief Reset UART receive buffer and frame flag.
 *
 * This function clears the receive buffer index and frame ready flag to
 * prepare for receiving a new UART frame.
 */
void UART_Init_Buffers(void) {
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
    uart_rx_index = 0;     // Reset index to start filling buffer from beginning
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <UART_Init_Buffers+0x18>)
 8000942:	2200      	movs	r2, #0
 8000944:	801a      	strh	r2, [r3, #0]
    uart_frame_ready = 0;  // Clear flag indicating a frame is ready for processing
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <UART_Init_Buffers+0x1c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	2000006a 	.word	0x2000006a
 8000958:	2000006c 	.word	0x2000006c

0800095c <UART_SendByte>:
 * @brief Send a single byte over UART1.
 * @param b Byte to transmit.
 *
 * Waits until the transmit data register is empty before sending the byte.
 */
void UART_SendByte(uint8_t b) {
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->SR & (1 << 7)));  // Wait until TX register is empty (ready to transmit)
 8000966:	bf00      	nop
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <UART_SendByte+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f9      	beq.n	8000968 <UART_SendByte+0xc>
    USART1->DR = b;                        // Write byte to data register to send
 8000974:	4a03      	ldr	r2, [pc, #12]	@ (8000984 <UART_SendByte+0x28>)
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	6053      	str	r3, [r2, #4]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40013800 	.word	0x40013800

08000988 <USART1_IRQHandler>:
 *
 * This ISR reads received bytes, accumulates them in a buffer, validates
 * frame format based on mode and length, and signals when a full frame
 * has been received for processing.
 */
void USART1_IRQHandler(void) {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
	if (USART1->SR & (1 << 5)) {          // Check if RX data register not empty (byte received)
 800098e:	4b33      	ldr	r3, [pc, #204]	@ (8000a5c <USART1_IRQHandler+0xd4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f003 0320 	and.w	r3, r3, #32
 8000996:	2b00      	cmp	r3, #0
 8000998:	d05c      	beq.n	8000a54 <USART1_IRQHandler+0xcc>
        uint8_t received_byte = USART1->DR;   // Read received byte (also clears RXNE flag)
 800099a:	4b30      	ldr	r3, [pc, #192]	@ (8000a5c <USART1_IRQHandler+0xd4>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	71fb      	strb	r3, [r7, #7]

        if (uart_rx_index >= sizeof(uart_rx_buffer)) {  // Prevent buffer overflow
 80009a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	2b31      	cmp	r3, #49	@ 0x31
 80009a8:	d903      	bls.n	80009b2 <USART1_IRQHandler+0x2a>
            uart_rx_index = 0;               // Reset buffer index if overflow happens
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	801a      	strh	r2, [r3, #0]
            return;                         // Exit ISR early to avoid writing out of bounds
 80009b0:	e050      	b.n	8000a54 <USART1_IRQHandler+0xcc>
        }

        uart_rx_buffer[uart_rx_index++] = received_byte;  // Store received byte in buffer and increment index
 80009b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	b291      	uxth	r1, r2
 80009bc:	4a28      	ldr	r2, [pc, #160]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 80009be:	8011      	strh	r1, [r2, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	4a28      	ldr	r2, [pc, #160]	@ (8000a64 <USART1_IRQHandler+0xdc>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	5453      	strb	r3, [r2, r1]

        if (uart_rx_index >= 6 && !uart_frame_ready) {   // Only check frame validity if minimum length reached
 80009c8:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	2b05      	cmp	r3, #5
 80009d0:	d938      	bls.n	8000a44 <USART1_IRQHandler+0xbc>
 80009d2:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <USART1_IRQHandler+0xe0>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d133      	bne.n	8000a44 <USART1_IRQHandler+0xbc>
            uint8_t mode = uart_rx_buffer[0];            // First byte is mode: 0=standard CAN, 1=extended CAN
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <USART1_IRQHandler+0xdc>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	71bb      	strb	r3, [r7, #6]

            if (mode != 0 && mode != 1) {                 // Validate mode is either 0 or 1
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d006      	beq.n	80009f6 <USART1_IRQHandler+0x6e>
 80009e8:	79bb      	ldrb	r3, [r7, #6]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d003      	beq.n	80009f6 <USART1_IRQHandler+0x6e>
                uart_rx_index = 0;                         // Invalid mode: reset buffer to discard frame
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	801a      	strh	r2, [r3, #0]
                return;
 80009f4:	e02e      	b.n	8000a54 <USART1_IRQHandler+0xcc>
            }

            uint8_t data_len = (mode == 0) ? uart_rx_buffer[3] : uart_rx_buffer[5];  // Data length at different offsets based on mode
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d103      	bne.n	8000a04 <USART1_IRQHandler+0x7c>
 80009fc:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <USART1_IRQHandler+0xdc>)
 80009fe:	78db      	ldrb	r3, [r3, #3]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	e002      	b.n	8000a0a <USART1_IRQHandler+0x82>
 8000a04:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <USART1_IRQHandler+0xdc>)
 8000a06:	795b      	ldrb	r3, [r3, #5]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	717b      	strb	r3, [r7, #5]
            if (data_len > 8) {                            // Validate data length max 8 bytes (CAN limit)
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	2b08      	cmp	r3, #8
 8000a10:	d903      	bls.n	8000a1a <USART1_IRQHandler+0x92>
                uart_rx_index = 0;                         // Invalid length: reset buffer
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	801a      	strh	r2, [r3, #0]
                return;
 8000a18:	e01c      	b.n	8000a54 <USART1_IRQHandler+0xcc>
            }

            // Calculate expected total frame length including header, data, interval bytes
            uint8_t expected_total_len = (mode == 0) ? (6 + data_len) : (8 + data_len);
 8000a1a:	79bb      	ldrb	r3, [r7, #6]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d103      	bne.n	8000a28 <USART1_IRQHandler+0xa0>
 8000a20:	797b      	ldrb	r3, [r7, #5]
 8000a22:	3306      	adds	r3, #6
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	e002      	b.n	8000a2e <USART1_IRQHandler+0xa6>
 8000a28:	797b      	ldrb	r3, [r7, #5]
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	713b      	strb	r3, [r7, #4]

            if (uart_rx_index >= expected_total_len) {    // Check if entire frame has been received
 8000a30:	793b      	ldrb	r3, [r7, #4]
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d802      	bhi.n	8000a44 <USART1_IRQHandler+0xbc>
                uart_frame_ready = 1;                      // Set flag to signal frame ready for processing
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <USART1_IRQHandler+0xe0>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
            }
        }

        if (uart_rx_index > 30) {   // If buffer length exceeds protocol max size, reset to avoid errors
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	2b1e      	cmp	r3, #30
 8000a4c:	d902      	bls.n	8000a54 <USART1_IRQHandler+0xcc>
            uart_rx_index = 0;
 8000a4e:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <USART1_IRQHandler+0xd8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40013800 	.word	0x40013800
 8000a60:	2000006a 	.word	0x2000006a
 8000a64:	20000038 	.word	0x20000038
 8000a68:	2000006c 	.word	0x2000006c

08000a6c <Process_UART_Frame>:
 *
 * Parses the received UART frame buffer to extract CAN frame parameters
 * and either sends the CAN frame once or sets up periodic retransmission
 * via the timer handler.
 */
void Process_UART_Frame(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af02      	add	r7, sp, #8
    uint8_t mode = uart_rx_buffer[0];              // Read mode byte (0=standard, 1=extended)
 8000a72:	4b41      	ldr	r3, [pc, #260]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	70fb      	strb	r3, [r7, #3]
    uint32_t id = 0;                               // Variable to hold CAN ID
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
    uint8_t data_len = (mode == 0) ? uart_rx_buffer[3] : uart_rx_buffer[5];  // Extract data length
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <Process_UART_Frame+0x1e>
 8000a82:	4b3d      	ldr	r3, [pc, #244]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000a84:	78db      	ldrb	r3, [r3, #3]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	e002      	b.n	8000a90 <Process_UART_Frame+0x24>
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000a8c:	795b      	ldrb	r3, [r3, #5]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	72fb      	strb	r3, [r7, #11]
    uint16_t interval = 0;                          // Interval between repeated sends (ms)
 8000a92:	2300      	movs	r3, #0
 8000a94:	813b      	strh	r3, [r7, #8]
    uint8_t *data_ptr;                              // Pointer to data bytes in buffer

    if (data_len > 8) data_len = 8;                 // Limit data length to max 8 bytes
 8000a96:	7afb      	ldrb	r3, [r7, #11]
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d901      	bls.n	8000aa0 <Process_UART_Frame+0x34>
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	72fb      	strb	r3, [r7, #11]

    if (mode == 0) {
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d11c      	bne.n	8000ae0 <Process_UART_Frame+0x74>
        // For standard CAN frame:
        id = (uart_rx_buffer[1] << 8) | uart_rx_buffer[2];   // Combine two bytes to form 11-bit ID (stored as 16-bit)
 8000aa6:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	4a32      	ldr	r2, [pc, #200]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000ab0:	7892      	ldrb	r2, [r2, #2]
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
        data_ptr = (uint8_t*)&uart_rx_buffer[4];             // Data bytes start after 4th byte
 8000ab8:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <Process_UART_Frame+0x110>)
 8000aba:	607b      	str	r3, [r7, #4]
        interval = (uart_rx_buffer[4 + data_len] << 8) | uart_rx_buffer[5 + data_len];  // Interval is two bytes after data
 8000abc:	7afb      	ldrb	r3, [r7, #11]
 8000abe:	3304      	adds	r3, #4
 8000ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000ac2:	5cd3      	ldrb	r3, [r2, r3]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	b21a      	sxth	r2, r3
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	3305      	adds	r3, #5
 8000ad0:	4929      	ldr	r1, [pc, #164]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000ad2:	5ccb      	ldrb	r3, [r1, r3]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	813b      	strh	r3, [r7, #8]
 8000ade:	e025      	b.n	8000b2c <Process_UART_Frame+0xc0>
    } else {
        // For extended CAN frame:
        id = (uart_rx_buffer[1] << 24) | (uart_rx_buffer[2] << 16) |
 8000ae0:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000ae2:	785b      	ldrb	r3, [r3, #1]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	061a      	lsls	r2, r3, #24
 8000ae8:	4b23      	ldr	r3, [pc, #140]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000aea:	789b      	ldrb	r3, [r3, #2]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	041b      	lsls	r3, r3, #16
 8000af0:	431a      	orrs	r2, r3
             (uart_rx_buffer[3] << 8) | uart_rx_buffer[4];    // Combine 4 bytes to form 29-bit ID (stored as 32-bit)
 8000af2:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000af4:	78db      	ldrb	r3, [r3, #3]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	021b      	lsls	r3, r3, #8
        id = (uart_rx_buffer[1] << 24) | (uart_rx_buffer[2] << 16) |
 8000afa:	4313      	orrs	r3, r2
             (uart_rx_buffer[3] << 8) | uart_rx_buffer[4];    // Combine 4 bytes to form 29-bit ID (stored as 32-bit)
 8000afc:	4a1e      	ldr	r2, [pc, #120]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000afe:	7912      	ldrb	r2, [r2, #4]
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	4313      	orrs	r3, r2
        id = (uart_rx_buffer[1] << 24) | (uart_rx_buffer[2] << 16) |
 8000b04:	60fb      	str	r3, [r7, #12]
        data_ptr = (uint8_t*)&uart_rx_buffer[6];             // Data bytes start after 6th byte
 8000b06:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <Process_UART_Frame+0x114>)
 8000b08:	607b      	str	r3, [r7, #4]
        interval = (uart_rx_buffer[6 + data_len] << 8) | uart_rx_buffer[7 + data_len];  // Interval two bytes after data
 8000b0a:	7afb      	ldrb	r3, [r7, #11]
 8000b0c:	3306      	adds	r3, #6
 8000b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000b10:	5cd3      	ldrb	r3, [r2, r3]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	7afb      	ldrb	r3, [r7, #11]
 8000b1c:	3307      	adds	r3, #7
 8000b1e:	4916      	ldr	r1, [pc, #88]	@ (8000b78 <Process_UART_Frame+0x10c>)
 8000b20:	5ccb      	ldrb	r3, [r1, r3]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	4313      	orrs	r3, r2
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	813b      	strh	r3, [r7, #8]
    }

    if (interval == 0) {          // If interval is zero, send CAN frame only once
 8000b2c:	893b      	ldrh	r3, [r7, #8]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10b      	bne.n	8000b4a <Process_UART_Frame+0xde>
        repeat = 0;               // Clear repeat flag (global variable from context)
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <Process_UART_Frame+0x118>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
        Timer_Stop();             // Stop timer for repeated sending
 8000b38:	f7ff fdce 	bl	80006d8 <Timer_Stop>
        CAN_Send(mode, id, data_ptr, data_len);   // Send CAN frame once
 8000b3c:	7afb      	ldrb	r3, [r7, #11]
 8000b3e:	78f8      	ldrb	r0, [r7, #3]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	68f9      	ldr	r1, [r7, #12]
 8000b44:	f7ff fba4 	bl	8000290 <CAN_Send>
 8000b48:	e00b      	b.n	8000b62 <Process_UART_Frame+0xf6>
    } else {
        repeat = 1;               // Set repeat flag to enable repeated sending
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <Process_UART_Frame+0x118>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
        Timer_Setup_Repeat(mode, id, data_ptr, data_len, interval);  // Setup timer to send CAN frame repeatedly
 8000b50:	7afa      	ldrb	r2, [r7, #11]
 8000b52:	78f8      	ldrb	r0, [r7, #3]
 8000b54:	893b      	ldrh	r3, [r7, #8]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68f9      	ldr	r1, [r7, #12]
 8000b5e:	f7ff fdd9 	bl	8000714 <Timer_Setup_Repeat>
    }

    uart_rx_index = 0;            // Reset buffer index to receive next frame
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <Process_UART_Frame+0x11c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	801a      	strh	r2, [r3, #0]
    uart_frame_ready = 0;         // Clear frame ready flag
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <Process_UART_Frame+0x120>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000038 	.word	0x20000038
 8000b7c:	2000003c 	.word	0x2000003c
 8000b80:	2000003e 	.word	0x2000003e
 8000b84:	20000021 	.word	0x20000021
 8000b88:	2000006a 	.word	0x2000006a
 8000b8c:	2000006c 	.word	0x2000006c

08000b90 <Reset_Handler>:
 8000b90:	f7ff fd5e 	bl	8000650 <SystemInit>
 8000b94:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <LoopFillZerobss+0xe>)
 8000b96:	490c      	ldr	r1, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
 8000b98:	4a0c      	ldr	r2, [pc, #48]	@ (8000bcc <LoopFillZerobss+0x16>)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:
 8000b9e:	58d4      	ldr	r4, [r2, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:
 8000ba4:	18c4      	adds	r4, r0, r3
 8000ba6:	428c      	cmp	r4, r1
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
 8000baa:	4a09      	ldr	r2, [pc, #36]	@ (8000bd0 <LoopFillZerobss+0x1a>)
 8000bac:	4c09      	ldr	r4, [pc, #36]	@ (8000bd4 <LoopFillZerobss+0x1e>)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:
 8000bb6:	42a2      	cmp	r2, r4
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>
 8000bba:	f000 f821 	bl	8000c00 <__libc_init_array>
 8000bbe:	f7ff fcf3 	bl	80005a8 <main>
 8000bc2:	4770      	bx	lr
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	08000c68 	.word	0x08000c68
 8000bd0:	20000004 	.word	0x20000004
 8000bd4:	20000074 	.word	0x20000074

08000bd8 <ADC1_2_IRQHandler>:
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_IncTick>:
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a03      	ldr	r2, [pc, #12]	@ (8000bfc <HAL_IncTick+0x20>)
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000070 	.word	0x20000070

08000c00 <__libc_init_array>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	2600      	movs	r6, #0
 8000c04:	4d0c      	ldr	r5, [pc, #48]	@ (8000c38 <__libc_init_array+0x38>)
 8000c06:	4c0d      	ldr	r4, [pc, #52]	@ (8000c3c <__libc_init_array+0x3c>)
 8000c08:	1b64      	subs	r4, r4, r5
 8000c0a:	10a4      	asrs	r4, r4, #2
 8000c0c:	42a6      	cmp	r6, r4
 8000c0e:	d109      	bne.n	8000c24 <__libc_init_array+0x24>
 8000c10:	f000 f81a 	bl	8000c48 <_init>
 8000c14:	2600      	movs	r6, #0
 8000c16:	4d0a      	ldr	r5, [pc, #40]	@ (8000c40 <__libc_init_array+0x40>)
 8000c18:	4c0a      	ldr	r4, [pc, #40]	@ (8000c44 <__libc_init_array+0x44>)
 8000c1a:	1b64      	subs	r4, r4, r5
 8000c1c:	10a4      	asrs	r4, r4, #2
 8000c1e:	42a6      	cmp	r6, r4
 8000c20:	d105      	bne.n	8000c2e <__libc_init_array+0x2e>
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c28:	4798      	blx	r3
 8000c2a:	3601      	adds	r6, #1
 8000c2c:	e7ee      	b.n	8000c0c <__libc_init_array+0xc>
 8000c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c32:	4798      	blx	r3
 8000c34:	3601      	adds	r6, #1
 8000c36:	e7f2      	b.n	8000c1e <__libc_init_array+0x1e>
 8000c38:	08000c60 	.word	0x08000c60
 8000c3c:	08000c60 	.word	0x08000c60
 8000c40:	08000c60 	.word	0x08000c60
 8000c44:	08000c64 	.word	0x08000c64

08000c48 <_init>:
 8000c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4a:	bf00      	nop
 8000c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c4e:	bc08      	pop	{r3}
 8000c50:	469e      	mov	lr, r3
 8000c52:	4770      	bx	lr

08000c54 <_fini>:
 8000c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c56:	bf00      	nop
 8000c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c5a:	bc08      	pop	{r3}
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	4770      	bx	lr
